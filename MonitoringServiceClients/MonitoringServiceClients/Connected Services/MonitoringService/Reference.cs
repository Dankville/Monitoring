//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MonitoringServiceClients.MonitoringService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MonitoringService.IMonitoringListener", CallbackContract=typeof(MonitoringServiceClients.MonitoringService.IMonitoringListenerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IMonitoringListener {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitoringListener/Subscribe", ReplyAction="http://tempuri.org/IMonitoringListener/SubscribeResponse")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitoringListener/Subscribe", ReplyAction="http://tempuri.org/IMonitoringListener/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitoringListener/UnSubscribe", ReplyAction="http://tempuri.org/IMonitoringListener/UnSubscribeResponse")]
        void UnSubscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitoringListener/UnSubscribe", ReplyAction="http://tempuri.org/IMonitoringListener/UnSubscribeResponse")]
        System.Threading.Tasks.Task UnSubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonitoringListener/EndHeartBeat")]
        void EndHeartBeat();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonitoringListener/EndHeartBeat")]
        System.Threading.Tasks.Task EndHeartBeatAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMonitoringListenerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonitoringListener/PublishMonitorMessageRan")]
        void PublishMonitorMessageRan(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonitoringListener/ErrorOccured")]
        void ErrorOccured(string exceptionMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitoringListener/HeartBeat", ReplyAction="http://tempuri.org/IMonitoringListener/HeartBeatResponse")]
        void HeartBeat();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMonitoringListenerChannel : MonitoringServiceClients.MonitoringService.IMonitoringListener, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MonitoringListenerClient : System.ServiceModel.DuplexClientBase<MonitoringServiceClients.MonitoringService.IMonitoringListener>, MonitoringServiceClients.MonitoringService.IMonitoringListener {
        
        public MonitoringListenerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MonitoringListenerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MonitoringListenerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MonitoringListenerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MonitoringListenerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public void UnSubscribe() {
            base.Channel.UnSubscribe();
        }
        
        public System.Threading.Tasks.Task UnSubscribeAsync() {
            return base.Channel.UnSubscribeAsync();
        }
        
        public void EndHeartBeat() {
            base.Channel.EndHeartBeat();
        }
        
        public System.Threading.Tasks.Task EndHeartBeatAsync() {
            return base.Channel.EndHeartBeatAsync();
        }
    }
}
